// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Wellcome.Dds.Repositories;

#nullable disable

namespace Wellcome.Dds.Repositories.Migrations
{
    [DbContext(typeof(DdsContext))]
    partial class DdsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Wellcome.Dds.Manifestation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("AssetType")
                        .HasColumnType("text")
                        .HasColumnName("asset_type");

                    b.Property<string>("CalmAltRef")
                        .HasColumnType("text")
                        .HasColumnName("calm_alt_ref");

                    b.Property<string>("CalmAltRefParent")
                        .HasColumnType("text")
                        .HasColumnName("calm_alt_ref_parent");

                    b.Property<string>("CalmRef")
                        .HasColumnType("text")
                        .HasColumnName("calm_ref");

                    b.Property<string>("CalmRefParent")
                        .HasColumnType("text")
                        .HasColumnName("calm_ref_parent");

                    b.Property<string>("CatalogueThumbnail")
                        .HasColumnType("text")
                        .HasColumnName("catalogue_thumbnail");

                    b.Property<string>("CatalogueThumbnailDimensions")
                        .HasColumnType("text")
                        .HasColumnName("catalogue_thumbnail_dimensions");

                    b.Property<string>("CollectionReferenceNumber")
                        .HasColumnType("text")
                        .HasColumnName("collection_reference_number");

                    b.Property<string>("CollectionTitle")
                        .HasColumnType("text")
                        .HasColumnName("collection_title");

                    b.Property<string>("CollectionWorkId")
                        .HasColumnType("text")
                        .HasColumnName("collection_work_id");

                    b.Property<bool>("ContainsRestrictedFiles")
                        .HasColumnType("boolean")
                        .HasColumnName("contains_restricted_files");

                    b.Property<string>("DipStatus")
                        .HasColumnType("text")
                        .HasColumnName("dip_status");

                    b.Property<string>("DlcsAssetType")
                        .HasColumnType("text")
                        .HasColumnName("dlcs_asset_type");

                    b.Property<int>("FileCount")
                        .HasColumnType("integer")
                        .HasColumnName("file_count");

                    b.Property<double>("FirstFileDuration")
                        .HasColumnType("double precision")
                        .HasColumnName("first_file_duration");

                    b.Property<string>("FirstFileExtension")
                        .HasColumnType("text")
                        .HasColumnName("first_file_extension");

                    b.Property<string>("FirstFileStorageIdentifier")
                        .HasColumnType("text")
                        .HasColumnName("first_file_storage_identifier");

                    b.Property<string>("FirstFileThumbnail")
                        .HasColumnType("text")
                        .HasColumnName("first_file_thumbnail");

                    b.Property<string>("FirstFileThumbnailDimensions")
                        .HasColumnType("text")
                        .HasColumnName("first_file_thumbnail_dimensions");

                    b.Property<int>("Index")
                        .HasColumnType("integer")
                        .HasColumnName("index");

                    b.Property<bool>("IsAllOpen")
                        .HasColumnType("boolean")
                        .HasColumnName("is_all_open");

                    b.Property<string>("Label")
                        .HasColumnType("text")
                        .HasColumnName("label");

                    b.Property<string>("ManifestationFile")
                        .HasColumnType("text")
                        .HasColumnName("manifestation_file");

                    b.Property<DateTime?>("ManifestationFileModified")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("manifestation_file_modified");

                    b.Property<string>("ManifestationIdentifier")
                        .HasColumnType("text")
                        .HasColumnName("manifestation_identifier");

                    b.Property<string>("PackageFile")
                        .HasColumnType("text")
                        .HasColumnName("package_file");

                    b.Property<DateTime?>("PackageFileModified")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("package_file_modified");

                    b.Property<string>("PackageIdentifier")
                        .HasColumnType("text")
                        .HasColumnName("package_identifier");

                    b.Property<string>("PackageLabel")
                        .HasColumnType("text")
                        .HasColumnName("package_label");

                    b.Property<int>("PackageShortBNumber")
                        .HasColumnType("integer")
                        .HasColumnName("package_short_b_number");

                    b.Property<string>("PermittedOperations")
                        .HasColumnType("text")
                        .HasColumnName("permitted_operations");

                    b.Property<DateTime>("Processed")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("processed");

                    b.Property<string>("ReferenceNumber")
                        .HasColumnType("text")
                        .HasColumnName("reference_number");

                    b.Property<string>("RootSectionAccessCondition")
                        .HasColumnType("text")
                        .HasColumnName("root_section_access_condition");

                    b.Property<string>("RootSectionType")
                        .HasColumnType("text")
                        .HasColumnName("root_section_type");

                    b.Property<bool>("SupportsSearch")
                        .HasColumnType("boolean")
                        .HasColumnName("supports_search");

                    b.Property<string>("VolumeIdentifier")
                        .HasColumnType("text")
                        .HasColumnName("volume_identifier");

                    b.Property<string>("WorkId")
                        .HasColumnType("text")
                        .HasColumnName("work_id");

                    b.Property<string>("WorkType")
                        .HasColumnType("text")
                        .HasColumnName("work_type");

                    b.HasKey("Id")
                        .HasName("pk_manifestations");

                    b.HasIndex("PackageIdentifier")
                        .HasDatabaseName("ix_manifestations_package_identifier");

                    b.ToTable("manifestations", (string)null);
                });

            modelBuilder.Entity("Wellcome.Dds.Metadata", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("identifier");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("label");

                    b.Property<string>("ManifestationId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("manifestation_id");

                    b.Property<string>("StringValue")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("string_value");

                    b.HasKey("Id")
                        .HasName("pk_metadata");

                    b.HasIndex("ManifestationId")
                        .HasDatabaseName("ix_metadata_manifestation_id");

                    b.ToTable("metadata", (string)null);
                });
#pragma warning restore 612, 618
        }
    }
}
