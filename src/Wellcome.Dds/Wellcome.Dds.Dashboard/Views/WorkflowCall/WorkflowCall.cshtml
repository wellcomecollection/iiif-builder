@model WorkflowJobWithIdentity

@{
    if (!Model.WorkflowJob.Created.HasValue)
    {
        ViewBag.Title = "b number not called";
    }
    else
    {
        ViewBag.Title = "Workflow call for " + Model.WorkflowJob.Identifier;
    }
}

    @if (TempData["new-workflow-job"] != null)
    {
        <div class="alert alert-success alert-dismissible" role="alert">
            <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
            <strong>Success!</strong> Workflow Job created.
        </div>
    }
    @if (TempData["new-workflow-job-error"] != null)
    {
        <div class="alert alert-danger alert-dismissible" role="alert">
            <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
            <strong>Failed to create new workflow job!</strong> @TempData["new-workflow-job-error"]
        </div>
    }
    @if (TempData["new-workflow-notification"] != null)
    {
        <div class="alert alert-success alert-dismissible" role="alert">
            <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
            <strong>Success!</strong> A message has been sent to the Workflow queue, and the job will be picked up by the workflow processor.
            @if (Model.WorkflowJob.Created.HasValue)
            {
                <span>(The workflow call below is the previous call for this item.)</span>
            }
        </div>
    }
    @if (TempData["new-workflow-notification-error"] != null)
    {
        <div class="alert alert-danger alert-dismissible" role="alert">
            <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
            <strong>Failed to notify workflow queue!</strong> @TempData["new-workflow-notification-error"]
        </div>
    }
    @if (TempData["job-deleted"] != null)
    {
        <div class="alert alert-success alert-dismissible" role="alert">
            <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
            <strong>@TempData["job-deleted"]</strong> 
        </div>
    }

@if (!Model.WorkflowJob.Created.HasValue)
{
    <h2>No DDS Call found for @Model.WorkflowJob.Identifier</h2>
}
else
{
    <h2>Workflow call for @Model.WorkflowJob.Identifier</h2>
}

<ul class="list-group">
    <li class="list-group-item"><a href="@Url.Action("Create", "WorkflowCall", new {id = Model.DdsIdentity.PathElementSafe})"><span class="glyphicon glyphicon-bullhorn"></span> Simulate Workflow Call</a></li>
    <li class="list-group-item"><a href="@Url.Action("PutWorkflowMessageOnQueue", "WorkflowCall", new {id = Model.DdsIdentity.PathElementSafe})"><span class="glyphicon glyphicon-bullhorn"></span> Push to workflow queue (SQS)</a></li>
    <li class="list-group-item">@Html.ActionLink("DDS View of " + Model.DdsIdentity.Value, "Manifestation", "Dash", new {id = Model.DdsIdentity.PathElementSafe}, new {})</li>
    <li class="list-group-item"><a href="@Url.Action("StorageManifest", "Peek", new {id = Model.DdsIdentity.PathElementSafe})">Storage Manifest</a></li>
    <li class="list-group-item"><a href="@Url.Action("XmlView", "Peek", new {id = Model.DdsIdentity.PackageIdentifierPathElementSafe })">METS file</a></li>
</ul>
<ul class="list-group">
    <li class="list-group-item">@Html.ActionLink("Show Recent Calls", "Recent", "WorkflowCall")</li>
</ul>

@if (Model.WorkflowJob.Created.HasValue)
{
    <table class="table">
        <thead>
        <tr>
            <th>Property</th>
            <th>Value</th>
        </tr>
        </thead>
        <tbody>
        <tr>
            <td>Identifier</td>
            <td>@Model.WorkflowJob.Identifier</td>
        </tr>
        <tr>
            <td>Force text</td>
            <td>@Model.WorkflowJob.ForceTextRebuild</td>
        </tr>
        <tr>
            <td>Created</td>
            <td>@StringUtils.GetFriendlyAge(Model.WorkflowJob.Created)</td>
        </tr>
        <tr>
            <td>Taken</td>
            <td>@StringUtils.GetFriendlyAge(Model.WorkflowJob.Taken)</td>
        </tr>
        <tr>
            <td>Waiting</td>
            <td>@Model.WorkflowJob.Waiting</td>
        </tr>
        <tr>
            <td>Finished</td>
            <td>@Model.WorkflowJob.Finished</td>
        </tr>
        <tr>
            <td>Job options</td>
            <td>@Html.Raw(String.Join("<br/>",((RunnerOptionsFlags)Model.WorkflowJob.WorkflowOptions.GetValueOrDefault()).ToString().Split(',')))</td>
        </tr>
        <tr>
            <td>First DLCS Job ID</td>
            <td>@Html.ActionLink(Model.WorkflowJob.FirstDlcsJobId.ToString(), "Index", "Job", new { id = Model.WorkflowJob.FirstDlcsJobId }, new { })</td>
        </tr>
        <tr>
            <td>DLCS Job Count</td>
            <td>@Model.WorkflowJob.DlcsJobCount</td>
        </tr>
        <tr>
            <td>DLCS Ingest Job Started</td>
            <td>@Model.WorkflowJob.IngestJobStarted</td>
        </tr>
        <tr>
            <td>Word Count</td>
            <td>@Model.WorkflowJob.Words</td>
        </tr>
        <tr>
            <td>Expected Texts</td>
            <td>@Model.WorkflowJob.ExpectedTexts</td>
        </tr>
        <tr>
            <td>Texts already on disk</td>
            <td>@Model.WorkflowJob.TextsAlreadyOnDisk</td>
        </tr>
        <tr>
            <td>Texts built</td>
            <td>@Model.WorkflowJob.TextsBuilt</td>
        </tr>
        <tr>
            <td>Annotation pages already on disk</td>
            <td>@Model.WorkflowJob.AnnosAlreadyOnDisk</td>
        </tr>
        <tr>
            <td>Annotation pages built</td>
            <td>@Model.WorkflowJob.AnnosBuilt</td>
        </tr>
        <tr>
            <td>Package build time</td>
            <td>@Model.WorkflowJob.PackageBuildTime</td>
        </tr>
        <tr>
            <td>Text and anno build time</td>
            <td>@Model.WorkflowJob.TextAndAnnoBuildTime</td>
        </tr>
        <tr>
            <td>Total time</td>
            <td>@Model.WorkflowJob.TotalTime</td>
        </tr>
        <tr>
            <td>Error</td>
            <td>@Model.WorkflowJob.Error</td>
        </tr>
        </tbody>
    </table>
    
    <form action="@Url.Action("Delete", new { id = Model.DdsIdentity.PackageIdentifierPathElementSafe})" method="POST">
        <div class="form-group">
            <button type="submit" class="btn btn-default">Delete this workflow job</button>
        </div>
    </form>
}