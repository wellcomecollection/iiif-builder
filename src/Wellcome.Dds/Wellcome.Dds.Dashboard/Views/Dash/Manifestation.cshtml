@using Wellcome.Dds.Dashboard.HtmlHelpers
@using Newtonsoft.Json
@using Microsoft.AspNetCore.Components.Rendering
@model Wellcome.Dds.Dashboard.Models.ManifestationModel

@{
    ViewBag.Title = "Dash: " + Model.DigitisedManifestation.Identifier;
    var metsManifestation = Model.DigitisedManifestation.MetsManifestation;
    var pdf = Model.DigitisedManifestation.PdfControlFile;
}

<a id="top"></a>

<div class="row" style="padding-top: 15px">
    
    @* BEGIN Alerts and messages from TempData *@
    @if (TempData["RefreshAllResult"] != null)
    {
        var refreshResult = JsonConvert.DeserializeObject<DeleteResult>(TempData["RefreshAllResult"].ToString());
        if (refreshResult.Success)
        {
            <div class="alert alert-success alert-dismissible" role="alert">
                <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <strong>Success!</strong> Priority workflow job to rebuild all assets queued. Caches will be cleared on completion.
            </div>
        }
        else
        {
            <div class="alert alert-danger alert-dismissible" role="alert">
                <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <strong>Failed to queue workflow job!</strong> @refreshResult.Message
            </div>
        }
    }
    @if (TempData["RefreshIIIFResult"] != null)
    {
        var refreshResult = JsonConvert.DeserializeObject<DeleteResult>(TempData["RefreshIIIFResult"].ToString());
        if (refreshResult.Success)
        {
            <div class="alert alert-success alert-dismissible" role="alert">
                <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <strong>Success!</strong> Priority workflow job to rebuild manifest + IIIF assets queued. Caches will be cleared on completion.
            </div>
        }
        else
        {
            <div class="alert alert-danger alert-dismissible" role="alert">
                <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <strong>Failed to queue workflow job!</strong> @refreshResult.Message
            </div>
        }
    }
    
    @if (TempData["ClearCachesResult"] != null)
    {
        var clearCacheResult = JsonConvert.DeserializeObject<DeleteResult>(TempData["ClearCachesResult"].ToString());
        if (clearCacheResult.Success)
        {
            <div class="alert alert-success alert-dismissible" role="alert">
                <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <strong>Success!</strong> Caches for this item have been queued for clearing.
            </div>
        }
        else
        {
            <div class="alert alert-danger alert-dismissible" role="alert">
                <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <strong>Failed to clear caches.</strong> @clearCacheResult.Message
            </div>
        }
    }
    @if (TempData["remove-old-jobs"] != null)
    {
        <div class="alert alert-success alert-dismissible" role="alert">
            <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
            <strong>@((int)TempData["remove-old-jobs"]) old job(s) removed!</strong>
        </div>
    }
    @if (TempData["orphans-deleted"] != null)
    {
        <div class="alert alert-success alert-dismissible" role="alert">
            <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
            <strong>@((int)TempData["orphans-deleted"]) Orphans deleted!</strong>
        </div>
    }

    @if (TempData["no-work-synchronisation"] != null)
    {
        <div class="alert alert-danger alert-dismissible" role="alert">
            <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
            <strong>Could not fully sync all DDS metadata:</strong> @TempData["no-work-synchronisation"])
        </div>
    }

    @if (Model.SyncOperation.Orphans.Any())
    {
        <div class="alert alert-danger alert-dismissible" role="alert">
            <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
            This manifestation has <a href="#orphans">@Model.SyncOperation.Orphans.Count orphaned DLCS records</a>. This means there are images in the DLCS with
            the string3 metadata value @Model.DigitisedManifestation.Identifier that are not present in the METS manifestation.
        </div>
    }

    @if (TempData.TryGetValue("delete-pdf", out var pdfDelete))
    {
        if ((bool)pdfDelete)
        {
            <div class="alert alert-success alert-dismissible" role="alert">
                <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">x</span></button>
                <strong>PDF deleted!</strong>
            </div>
        }
        else
        {
            <div class="alert alert-danger alert-dismissible" role="alert">
                <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">x</span></button>
                <strong>Error deleting PDF. The error has been logged. This may be a transient error, in which case trying again may work.</strong>
            </div>
        }
    }
    @* END Alerts and messages from TempData *@
    
    @* BEGIN Manifestation Identifier and Label *@
    <div class="col-md-9">
        <h3 style="margin-top: 13px;">@Model.DigitisedManifestation.Identifier
            @if (metsManifestation.Label.HasText() && metsManifestation.Label != Model.DigitisedManifestation.Identifier!.Value)
            {
                <span>-</span>
                @metsManifestation.Label // Only Digitised objects will have a useful label
            }
        </h3>
    </div>
    @* END Manifestation Identifier and Label *@

    @* BEGIN Multiple Manifestation Navigator *@
    @* (only appears if more than one volume (manifestation) *@
    <div class="col-md-3">
        @if (Model.IsStandardMultipleManifestation)
        {
            <div class="btn-group" role="group" aria-label="Manifestation navigation" style="margin-top: 9px">
                <a class="btn btn-default" href="@Model.PreviousLink"><span class="glyphicon glyphicon-chevron-left"></span></a>
                <div class="btn-group" role="group">
                    <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        Manifestation @Model.Index of @Model.Siblings.Count
                        <span class="caret"></span>
                    </button>
                    <ul class="dropdown-menu dropdown-menu-right">
                        @foreach (var manifestation in Model.Siblings)
                        {
                            <li class="@Model.GetDropDownClass(manifestation)">
                                <a href="@Model.SiblingLinks[manifestation.Identifier]">@(manifestation.Order + ": " + manifestation.Label)</a>
                            </li>
                        }
                    </ul>
                </div>
                <a class="btn btn-default" href="@Model.NextLink"><span class="glyphicon glyphicon-chevron-right"></span></a>
            </div>
        }
    </div>
    @* END Multiple Manifestation Navigator *@
</div>

@* BEGIN Main Wrapper for side nav and asset list *@
<div class="row" style="margin-top: 1em;">

    @* BEGIN Side Nav *@
    <div class="col-md-3">
        @if (Model.IsRunning)
        {
            @* BEGIN progress bars for currently running batches *@
            <div class="panel panel-info">
                <div class="panel-heading">
                    <h3 class="panel-title">Running...</h3>
                </div>
                <div class="panel-body">
                    @if (Model.BatchesForImages.Any())
                    {
                        @foreach (var activeBatch in Model.BatchesForImages)
                        {
                            RenderBatchProgress(activeBatch);
                        }
                        {
                            var latest = Model.BatchesForImages.OrderByDescending(b => b.Submitted).First();
                            <p><em><small>Most recent batch: @StringUtils.GetLocalDate(latest.Submitted)</small></em></p>
                            <p><a href="#" onclick="location.reload(); return false;" class="btn btn-primary"><span class="glyphicon glyphicon-refresh"></span> Refresh</a></p>
                            if (latest.Submitted < DateTime.UtcNow.AddMinutes(-10))
                            {
                                <p><a href="@Url.Action("Resubmit", "Job", new { id = Model.DdsIdentifier.PathElementSafe })" class="btn btn-info"><span class="glyphicon glyphicon-transfer"></span> Resubmit*</a></p>
                            }
                        }
                    }
                    else
                    {
                        <p class="text-danger">
                            A sync is currently running, but there are no batches for the images in this manifestation.
                        </p>
                        <p><a href="@Url.Action("Resubmit", "Job", new { id = Model.DdsIdentifier.PathElementSafe })" class="btn btn-info"><span class="glyphicon glyphicon-transfer"></span> Resubmit*</a></p>
                    }
                </div>
            </div>
            @* END progress bars for currently running batches *@
        }
        else if (Model.SyncOperation.RequiresSync || Model.SyncOperation.HasInvalidAccessCondition)
        {
            @* BEGIN Information about synchronisation status *@
            @* (only shown if not all assets in manifestation are synced with DLCS) *@
            <div class="panel panel-@Model.SyncSummary.CssClass">
                <div class="panel-heading">
                    <h3 class="panel-title">Requires Sync</h3>
                </div>
                <div class="panel-body">
                    <table class="table table-condensed">
                        <thead>
                        <tr>
                            <th>Description</th>
                            <th>#</th>
                            <th></th>
                        </tr>
                        </thead>
                        <tbody>
                        @foreach (var syncCategory in Model.SyncSummary.Categories)
                        {
                            <tr>
                                <td><a href="#@syncCategory.TableRowId">@syncCategory.Label</a></td>
                                <td>@syncCategory.Count</td>
                                <td>@Html.Raw(syncCategory.StatusIcon)</td>
                            </tr>
                        }
                        </tbody>
                    </table>
                    @if (Model.SyncOperation.HasInvalidAccessCondition)
                    {
                        <p class="text-danger">
                            This item CANNOT be synced because it has at least one invalid access condition.
                        </p>
                    }
                    else
                    {
                        <a href="@Url.Action("Sync", "Job", new {id = Model.DdsIdentifier.PathElementSafe})" 
                           class="btn btn-info"><span class="glyphicon glyphicon-transfer"></span> Sync</a>
                    }
                </div>
            </div>
            @* END Information about synchronisation status *@
        }

        @* BEGIN Side Nav Link Panel *@
        @* Links to related resources - manifests, catalogue api, web pages *@
        <div class="panel panel-primary">
            <div class="panel-heading">
                @metsManifestation.Type (@Model.GetTypeSummary())
            </div>
            <ul class="list-group">
                <li class="list-group-item">
                    <ul class="list-unstyled">
                        <li><a href="@Model.ManifestUrl">Live IIIF Manifest</a></li>
                        <li>@Html.ActionLink("Live IIIF 3 in UV", "UV", "Dash", new {id = Model.DdsIdentifier.PathElementSafe, version=3}, new {target="_blank"}) </li>
                        <li>@Html.ActionLink("Live IIIF 2/3 in Mirador", "Mirador", "Dash", new {id = Model.DdsIdentifier.PathElementSafe}, new {target="_blank"}) </li>
                        @if (Model.DdsIdentifier.StorageSpace != StorageSpace.BornDigital)
                        {
                            <li>@Html.ActionLink("Live IIIF 2 in UV", "UV", "Dash", new {id = Model.DdsIdentifier.PathElementSafe, version=2}, new {target="_blank"}) </li>
                        }
                        <li>@Html.ActionLink("IIIF Validator", "Validator", "Dash", new {id = Model.DdsIdentifier.PathElementSafe}, new {target="_blank"}) </li>
                    </ul>
                </li>
                <li class="list-group-item">
                    <ul class="list-unstyled">
                        @if (Model.WorkPage.HasText())
                        {
                            <li><a href="@Model.WorkPage">Work page</a></li>
                        }
                        else
                        {
                            <li><span style="color:red;">Work page</span> <small>(no catalogue api)</small></li>
                        }
                        <li><a href="@Model.CatalogueApi">Catalogue API</a> | <a href="@Model.CatalogueApiFull">Full</a></li>
                    </ul>
                </li>
                <li class="list-group-item">
                    <ul class="list-unstyled">
                        <li><a href="@Model.DlcsSkeletonManifest">DLCS Preview Manifest</a></li>
                        <li><a href="http://universalviewer.io/uv.html?manifest=@Model.DlcsSkeletonManifest">DLCS Preview Manifest in UV</a></li>
                        <li>
                            <a href="@Url.Action("IIIF", "Peek", new { id = Model.DdsIdentifier.PathElementSafe })">DDS Preview IIIF Manifest</a>
                             | <a href="@Url.Action("IIIFRaw", "Peek", new { id = Model.DdsIdentifier.PathElementSafe })">Raw</a>
                        </li>
                        <li class="needsOrigin">@Html.ActionLink("DDS Preview IIIF 3 in UV", "UVPreview", "Dash", new {id = Model.DdsIdentifier.PathElementSafe, version=3}, new {target="_blank"})</li>
                        <li class="needsOrigin">@Html.ActionLink("DDS Preview IIIF 2/3 in Mirador", "MiradorPreview", "Dash", new {id = Model.DdsIdentifier.PathElementSafe}, new {target="_blank"})</li>
                    </ul>
                </li>
                <li class="list-group-item">
                    Permitted operations:
                    <ul class="list-unstyled">
                        @foreach (var permittedOperation in metsManifestation.PermittedOperations)
                        {
                            <li>- <small><em>@permittedOperation</em></small></li>
                        }
                    </ul>
                </li>
                <li class="list-group-item">
                    <ul class="list-unstyled">
                        <li><a href="@Url.Action("StorageManifest", "Peek", new {id = Model.DdsIdentifier.PackageIdentifierPathElementSafe})"><span class="glyphicon glyphicon-file"></span> Storage Manifest</a></li>
                        <li><a href="@Url.Action("StorageMap", "Dash", new { id = Model.DdsIdentifier.PackageIdentifierPathElementSafe })"><span class="glyphicon glyphicon-tags"></span> Storage Map (versions)</a></li>
                        @{
                            var sourceFile = ((IFileBasedResource)metsManifestation).SourceFile;
                        }
                        <li><a href="@Url.Action("XmlView", "Peek", new {id = Model.DdsIdentifier.PackageIdentifierPathElementSafe, parts = sourceFile.RelativePath})"><span class="glyphicon glyphicon-file"></span> METS file</a></li>
                    </ul>
                </li>
                @if (metsManifestation.SectionMetadata != null)
                {
                    <li class="list-group-item">
                        <ul class="list-unstyled">
                            <li>
                                Mods:
                                <span title="accessCondition" class="label label-primary">@metsManifestation.SectionMetadata.AccessCondition</span>
                                <span title="leader6" class="label label-primary">@metsManifestation.SectionMetadata.Leader6</span>
                            </li>
                        </ul>
                    </li>
                }
                @if (metsManifestation.Sequence.HasItems())
                {
                    if (metsManifestation.Sequence[0].GetStoredFileInfo().Uri.Contains("archive-storage"))
                    {
                        <li class="list-group-item">
                            <span class="glyphicon glyphicon-flash"></span>
                            <text>@Html.ActionLink("Wellcome archive storage", "StorageManifest", "Peek", new { id = Model.DdsIdentifier.PackageIdentifierPathElementSafe }, new { })</text>
                        </li>
                    }
                }
            </ul>
        </div>
        @* END Side Nav Link Panel *@


        @* BEGIN Mixed Access Conditions Notice *@
        @* (quite rare so worth surfacing in the dashboard, when a single manifestation assets with different access conditions *@
        @if (Model.SyncSummary.AccessConditions.Length > 1)
        {
            <div class="panel panel-info">
                <div class="panel-heading">
                    <h3 class="panel-title">Mixed access</h3>
                </div>
                <div class="panel-body">
                    <table class="table table-condensed">
                        <thead>
                            <tr>
                                <th>Access Condition</th>
                                <th>#</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var accessCondition in Model.SyncSummary.AccessConditions)
                            {
                                <tr>
                                    <td><a href="#@accessCondition.TableRowId">@accessCondition.Label</a></td>
                                    <td>@accessCondition.Count</td>
                                    <td>@Html.Raw(accessCondition.StatusIcon)</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        }
        @* END Mixed Access Conditions Notice *@

        
        @* BEGIN Processing Jobs Summary and action links *@
        <h3>Jobs</h3>
        <ul class="list-group">
            <li class="list-group-item">
                <a href="@Url.Action("WorkflowCall", "WorkflowCall", new {id = Model.DdsIdentifier.PackageIdentifierPathElementSafe})"><span class="glyphicon glyphicon-info-sign"></span> Workflow call info</a>
            </li>    
            <li class="list-group-item">
                <a href="@Url.Action("Create", "WorkflowCall", new {id = Model.DdsIdentifier.PackageIdentifierPathElementSafe})"><span class="glyphicon glyphicon-bullhorn"></span> Simulate workflow message</a>
            </li>   
            <li class="list-group-item">
                <a href="@Url.Action("PutWorkflowMessageOnQueue", "WorkflowCall", new {id = Model.DdsIdentifier.PackageIdentifierPathElementSafe})"><span class="glyphicon glyphicon-bullhorn"></span> Push to workflow queue (SQS)</a>
            </li>
            @foreach (var job in Model.IngestJobs)
            {
                <li class="list-group-item">
                    <span class="badge">@job.ImageCount</span>
                    @Html.ActionLink("" + StringUtils.GetLocalDate(job.Created), "Index", "Job", new {id = job.Id}, new {})
                    @{
                        if (Model.DbJobIdsToActiveBatches != null && Model.DbJobIdsToActiveBatches.ContainsKey(job.Id))
                        {
                            foreach (var batch in Model.DbJobIdsToActiveBatches[job.Id])
                            {
                                RenderBatchProgress(batch);
                            }
                        }
                    }
                </li>
            }
            @if (!Model.SyncOperation.RequiresSync && Model.IngestJobs.Count > 1 && !Model.IsRunning)
            {
                <li class="list-group-item">
                    <a href="@Url.Action("CleanOldJobs", "Job", new {id = Model.DdsIdentifier.PathElementSafe})"><span class="glyphicon glyphicon-trash"></span> Clean up old jobs</a>
                </li>
            }
            @if (!Model.IsRunning && !Model.SyncOperation.RequiresSync)
            {
                <li class="list-group-item">
                    <a href="@Url.Action("ForceReingest", "Job", new {id = Model.DdsIdentifier.PathElementSafe})"><span class="glyphicon glyphicon-transfer"></span> Force Reingest</a>
                </li>
            }
        </ul>
        @* END Processing Jobs Summary and action links *@


        @* BEGIN Additional actions for all the manifestations in a multiple manifestation *@
        @if (Model.IsStandardMultipleManifestation)
        {
            <h3>Multiples</h3>
            <ul class="list-group">
                <li class="list-group-item">
                    <a href="@Url.Action("SyncAllManifestations", "Job", new {id = Model.DdsIdentifier.PackageIdentifierPathElementSafe})"><span class="glyphicon glyphicon-duplicate"></span> Sync all @Model.Siblings.Count manifestations</a>
                </li>
                <li class="list-group-item">
                    <a href="@Url.Action("ForceReingestAllManifestations", "Job", new {id = Model.DdsIdentifier.PackageIdentifierPathElementSafe})"><span class="glyphicon glyphicon-duplicate"></span> Reingest all @Model.Siblings.Count manifestations</a>
                </li>
            </ul>
        }
        @* END Additional actions for all the manifestations in a multiple manifestation *@


        @* BEGIN Actions to rebuild IIIF and Text derivatives *@
        <h3>Tasks</h3>
        <div class="panel panel-default">

            <ul class="list-group">
                <li class="list-group-item">
                    @using (Html.BeginForm("RefreshIIIF", "WorkflowJob", new {id = Model.DdsIdentifier.PathElementSafe}, FormMethod.Post))
                    {
                        <button type="submit" class="btn btn-link" title="Refresh Manifestations and IIIF">
                            <span class="glyphicon glyphicon-refresh"></span> Rebuild IIIF
                        </button>
                    }
                    @if (Model.ManifestWriteTime.HasValue)
                    {
                        <small>Manifest generated: @StringUtils.GetFriendlyAge(Model.ManifestWriteTime.Value)</small>
                    }
                    else
                    {
                        <small><em>No manifest on S3 yet</em></small>
                    }
                </li>
                @{
                    var metsManifestationHasText = metsManifestation.Sequence.Any(pf => pf.RelativeAltoPath.HasText());
                }
                @if (metsManifestationHasText)
                {
                    <li class="list-group-item">
                        @using (Html.BeginForm("RefreshAll", "WorkflowJob", new {id = Model.DdsIdentifier.PathElementSafe}, FormMethod.Post))
                        {
                            <button type="submit" class="btn btn-link" title="Refresh All Resources">
                                <span class="glyphicon glyphicon-refresh"></span> Rebuild All
                            </button>
                        }
                        @if (Model.TextWriteTime.HasValue)
                        {
                            <small>Text generated: @StringUtils.GetFriendlyAge(Model.TextWriteTime.Value)</small>
                        }
                        else
                        {
                            <small><em>No text on S3 yet</em></small>
                        }
                        <br/>
                        @if (Model.AnnotationWriteTime.HasValue)
                        {
                            <small>Annos generated: @StringUtils.GetFriendlyAge(Model.AnnotationWriteTime.Value)</small>
                        }
                        else
                        {
                            <small><em>No annos on S3 yet</em></small>
                        }
                    </li>
                }
                <li class="list-group-item">
                    @using (Html.BeginForm("ClearCaches", "WorkflowJob", new {id = Model.DdsIdentifier.PathElementSafe}, FormMethod.Post))
                    {
                        <input type="hidden" name="hasText" value="@metsManifestationHasText.ToString()" />
                        <button type="submit" class="btn btn-link" title="Clear Caches">
                            <span class="glyphicon glyphicon-refresh"></span> Clear Caches
                        </button>
                    }
                    <small><em>Invalidate Cloudfront and other caches without rebuilding IIIF</em></small>
                </li>
            </ul>
        </div>
        @* END Actions to rebuild IIIF and Text derivatives *@
        
    
        @* BEGIN PDF Information Box *@
        @if (metsManifestation.FirstInternetType == "image/jp2")
        {
            <h3>PDF</h3>
            if (pdf == null)
            {
                <div class="panel panel-danger">
                    <div class="panel-body">
                        <p>Cannot retrieve information for PDF</p>
                    </div>
                </div>
            }
            else if (pdf.InProcess)
            {
                <div class="panel panel-info">
                    <div class="panel-body">
                        <p>
                            <span class="glyphicon glyphicon-hourglass"></span> PDF currently being created<br />
                            Started: @pdf.Created
                        </p>
                    </div>
                </div>
            }
            else if (!pdf.Exists)
            {
                <div class="panel panel-warning">
                    <div class="panel-body">
                        <p>This PDF does not exist</p>
                        <a href="@pdf.Url" class="btn btn-primary" target="_blank"><span class="glyphicon glyphicon-file"></span> Make PDF</a>
                    </div>
                </div>
            }
            else
            {
                <div class="panel panel-default">
                    <ul class="list-group">
                        <li class="list-group-item">
                            <a href="@pdf.Url" target="_blank"><span class="glyphicon glyphicon-file"></span> View</a>
                            <br />
                            @pdf.Created <br />
                            @pdf.PageCount pages<br />
                            @StringUtils.FormatFileSize(pdf.SizeBytes)<br />
                            @if (pdf.Roles.HasItems())
                            {
                                <text>Roles:</text>
                                <ul class="list-unstyled">
                                    @foreach (var role in pdf.Roles)
                                    {
                                        <li>- <small><em>@role.Split('/').Last()</em></small></li>
                                    }
                                </ul>
                            }
                        </li>
                        <li class="list-group-item">
                            <a href="@Url.Action("DeletePdf", "Dash", new {id = Model.DdsIdentifier.PathElementSafe})" class="btn btn-warning"><span class="glyphicon glyphicon-file"></span> Delete PDF</a>
                        </li>
                    </ul>
                </div>
            }
        }
        @* END PDF Information Box *@

    </div>
    @* END Side Nav *@

    
    @* BEGIN Main Asset Table *@
    <div class="col-md-9">
        <h4 style="margin-top: 0;">
            @Html.Raw(Model.GetAssetGlyph())
            @metsManifestation.Sequence.Count assets of type @Model.GetTypeSummary()
        </h4>

        @* Tree here or table *@
        @if (Model.DdsIdentifier.StorageSpace == StorageSpace.BornDigital)
        {
            var fileMap = Model.DigitisedManifestation.MetsManifestation.Sequence
                .ToDictionary(pf => pf.Id, pf => pf);
            RenderTree(Model.DigitisedManifestation.MetsManifestation.RootStructRange, fileMap);
        }
        else
        {
            <table class="table table-hover table-condensed asset-table">
                <thead>
                    <tr>
                    @* The table headings differ between different METS and Asset sources *@
                    @if (Model.ManifestationFamily == AssetFamily.Image)
                    {
                        @* Digitised Images *@
                        <th>Order</th>
                        <th>Label</th>
                        <th>Dimensions</th>
                        <th>Access</th>
                        <th>ALTO</th>
                        <th>DLCS</th>
                        <th></th>
                    }
                    else if (Model.ManifestationFamily == AssetFamily.TimeBased)
                    {
                        @* Digitised AV *@
                        <th>Order</th>
                        <th>Size</th>
                        <th>Format</th>
                        <th>Dimensions</th>
                        <th>Access</th>
                        <th>DLCS</th>
                            @*<th>Transcode</th>*@
                        <th></th>
                    }
                    else
                    {
                        @* Files, but via Goobi not Archivematica *@
                        <th>Order</th>
                        <th>Size</th>
                        <th>Format</th>
                        <th>Pages</th>
                        <th>Access</th>
                        <th>DLCS</th>
                        <th></th>
                    }
                </tr>
                </thead>
                <tbody>

                    @foreach (IPhysicalFile pf in metsManifestation.Sequence)
                    {
                        var dlcsImage = Model.GetDlcsImage(pf.StorageIdentifier);
                        var problems = Model.GetProblemMessage(pf.StorageIdentifier);
                        bool ignored = false; // The physical file itself is never ignored.
                        <tr class="@Model.GetCssClassForImageRow(dlcsImage, ignored)" id="@Model.GetTableId(pf.StorageIdentifier)">
                            <td>
                                <small>@pf.Order</small>
                                @if (problems.HasText())
                                {
                                    <a class="sync-problem" href="#" data-placement="auto" title="@problems">
                                        <span class="glyphicon glyphicon-exclamation-sign"></span>
                                    </a>
                                }
                            </td>

                            @if (Model.ManifestationFamily == AssetFamily.Image)
                            {
                                <td>@pf.OrderLabel</td>
                                <td>@pf.AssetMetadata.GetImageWidth() x @pf.AssetMetadata.GetImageHeight()</td>
                            }
                            else
                            {
                                <td>@StringUtils.FormatFileSize(pf.AssetMetadata.GetFileSize())</td>
                                <td><small>@pf.AssetMetadata.GetFormatName()</small><br/>
                                @foreach (var deliveredFile in Model.DeliveredFilesMap[pf.StorageIdentifier])
                                {
                                    <a href="@deliveredFile.PublicUrl" title="@deliveredFile.GetSummary()"><span class="label label-primary">@deliveredFile.DeliveryChannel</span></a>
                                }
                                    </td>
                                if (Model.ManifestationFamily == AssetFamily.TimeBased)
                                {
                                    var mediaDims = pf.AssetMetadata.GetMediaDimensions();
                                    <td>
                                        @pf.AssetMetadata.GetDisplayDuration()
                                        @if (mediaDims.Height > 0)
                                        {
                                            <br/>@mediaDims.Width
                                            <text> x </text>
                                            @mediaDims.Height
                                        }
                                    </td>
                                }
                                else
                                {
                                    <td>@pf.AssetMetadata.GetNumberOfPages()</td>
                                }
                            }
                            @if (ignored)
                            {
                                <td>ignored</td>
                            }
                            else
                            {
                                <td>@pf.AccessCondition</td>
                            }
                            @if (Model.ManifestationFamily == AssetFamily.Image)
                            {
                                <td>
                                    @if (pf.RelativeAltoPath.HasText())
                                    {
                                        <a href="@Url.ActionWithPath("XmlView", "Peek", new { id = Model.DdsIdentifier.PackageIdentifierPathElementSafe }, pf.RelativeAltoPath)"
                                           title="@pf.RelativeAltoPath"><span class="label label-primary">ALTO</span></a>
                                    }
                                </td>
                            }
                            @if (dlcsImage != null)
                            {
                                <td>
                                    <a href="@Url.Action("Index", "Asset", new { space = dlcsImage.Space, id = dlcsImage.ModelId })" target="_blank">@pf.StorageIdentifier</a>
                                    @if (dlcsImage.Error.HasText())
                                    {
                                        <br/><span class="text-danger small">@dlcsImage.Error</span>
                                    }
                                    @if (dlcsImage.Metadata.HasText() && Model.ManifestationFamily == AssetFamily.TimeBased)
                                    {
                                        <div class="tbmetadata">
                                            <a class="metadata-toggle" href="#"><span class="glyphicon glyphicon-chevron-down"></span> Show job metadata</a>
                                            <pre style="display: none">@dlcsImage.Metadata
                                </pre>
                                        </div>
                                    }
                                </td>
                            }
                            else
                            {
                                <td>@pf.StorageIdentifier</td>
                            }
                            
                            
                            
                            <td>
                                @if (Model.ManifestationFamily == AssetFamily.Image)
                                {
                                    var thumb24 = Model.GetThumbnail(dlcsImage, 24);
                                    var thumb100 = Model.GetThumbnail(dlcsImage, 100);
                                    var fullIIIF = Model.GetIIIFImageService(dlcsImage, "image");
                                    @Html.Raw(Model.GetStatusIconForImageRow(dlcsImage, ignored))
                                    <iiif-thumb class="iiifpreview"
                                                small-thumb="thumb24" large-thumb="thumb100"
                                                full-iiif-service="@fullIIIF" title="@pf.GetStoredFileInfo().Uri"/>
                                }
                                <a target="_blank" href="@Model.GetAwsConsoleUri(pf.GetStoredFileInfo().Uri)" title="Find in S3"> S3</a>
                            </td>
                        </tr>
                        
                        
                        @foreach (var adjunct in Model.GetAdjunctsForDashboardDisplay(pf.Files))
                        {
                            dlcsImage = Model.GetDlcsImage(adjunct.StorageIdentifier);
                            ignored = Model.IsIgnored(adjunct.StorageIdentifier);
                            problems = Model.GetProblemMessage(adjunct.StorageIdentifier);
                            <tr class="@Model.GetCssClassForImageRow(dlcsImage, ignored)" id="@Model.GetTableId(adjunct.StorageIdentifier)">
                                <td class="adjunct"><span>&#10551;</span>
                                    @if (problems.HasText())
                                    {
                                        <a class="sync-problem" href="#" data-placement="auto" title="@problems">
                                            <span class="glyphicon glyphicon-exclamation-sign"></span>
                                        </a>
                                    }
                                    
                                    @adjunct.Use</td>
                                @if (adjunct.ProcessingBehaviour.AssetFamily == AssetFamily.Image)
                                {
                                    <td>@StringUtils.FormatFileSize(adjunct.AssetMetadata.GetFileSize())</td>
                                    <td><small>@adjunct.AssetMetadata?.GetFormatName()</small></td>
                                    <td><small>@adjunct.AssetMetadata?.GetImageWidth() x @adjunct.AssetMetadata?.GetImageHeight()</small></td>                                                         
                                }
                                else
                                {
                                    <td>@StringUtils.FormatFileSize(adjunct.AssetMetadata.GetFileSize())</td>
                                    <td><small>@adjunct.AssetMetadata.GetFormatName()</small>
                                        @if (!ignored)
                                        {
                                            <br/>
                                            @foreach (var deliveredFile in Model.DeliveredFilesMap[adjunct.StorageIdentifier])
                                            {
                                                <a href="@deliveredFile.PublicUrl" title="@deliveredFile.GetSummary()"><span class="label label-primary">@deliveredFile.DeliveryChannel</span></a>
                                            }
                                        }</td>
                                    if (adjunct.ProcessingBehaviour.AssetFamily == AssetFamily.TimeBased)
                                    {
                                        <td>@adjunct.AssetMetadata.GetDisplayDuration()</td>
                                    }
                                    else
                                    {
                                        <td>@adjunct.AssetMetadata.GetNumberOfPages()</td>
                                    }
                                }
                                @if (ignored)
                                {
                                    <td>ignored</td>
                                }
                                else
                                {
                                    <td>@pf.AccessCondition</td>
                                }
                                @{
                                    if (dlcsImage != null)
                                    {
                                        <td>
                                            <a href="@Url.Action("Index", "Asset", new { space = dlcsImage.Space, id = dlcsImage.ModelId })" target="_blank">@adjunct.StorageIdentifier</a>
                                        </td>
                                    }
                                    else
                                    {
                                        <td>@adjunct.StorageIdentifier</td>
                                    }
                                }
                                <td>
                                    <a target="_blank" href="@Model.GetAwsConsoleUri(pf.GetStoredFileInfo().Uri)" title="Find in S3"> S3</a>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        }
 
        @* BEGIN Summary of orphans *@
        @* (DLCS assets that match metadata but not listed in METS *@
        @if (Model.SyncOperation.Orphans.Any())
        {
            <h4 id="orphans">@Model.SyncOperation.Orphans.Count Orphans</h4>
            <p>These images in the DLCS have the string3 metadata field @Model.DigitisedManifestation.Identifier but they are not present in the current METS manifestation.</p>
            <p>
                This does not mean that they should be deleted, because they might belong to a different manifestation
                (e.g., the METS structure has been rearranged across manifestations and not yet synchronised for all manifestations).
                However, they might also represent images that have been renamed in storage but not deleted from the DLCS.
            </p>
            <p><a href="@Url.Action("DeleteOrphans", "Dash", new {id = Model.DdsIdentifier.PathElementSafe})" class="btn btn-info"><span class="glyphicon glyphicon-trash"></span> Delete Orphans</a></p>
            <table class="table table-hover table-condensed">
                <thead>
                    <tr>
                        <th>Created</th>
                        @*<th>Dimensions</th>*@
                        <th>Access</th>
                        <th>Error</th>
                        <th width="30%">DLCS</th>
                        <td>Ingesting</td>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var orphan in Model.SyncOperation.Orphans)
                    {
                        <tr>
                            <td>@StringUtils.GetLocalDate(orphan.Created)</td>
                            @*<td>@orphan.Width x @orphan.Height</td>*@
                            <td>@Model.GetAbridgedRoles(orphan.Roles)</td>
                            <td>@orphan.Error</td>
                            <td width="30%"><a href="@Url.Action("Index", "Asset", new { space = orphan.Space, id = orphan.ModelId })" target="_blank">@orphan.StorageIdentifier</a></td>
                            <td>@orphan.Ingesting</td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        @* END Summary of orphans *@
    
    </div>
    @* END Main Asset Table *@

</div>
@* END Main Wrapper for side nav and asset list *@


<div class="row">
    <div class="col-sm-12">
        <a href="#top" class="pull-right">Go back to top</a>
    </div>
</div>


@* BEGIN Timing telemetry *@
<hr />
<h3>SyncOperation</h3>
<ul>
    @foreach (var s in Model.SyncOperation.GetSummary())
    {
        <li>@s</li>
    }
</ul>

<h3>Log</h3>
<table class="table table-hover">
    <tr>
        <th>Event (times in ms)</th>
        <th>Split</th>
        <th>Total</th>
    </tr>

    @foreach (var logEvent in ViewBag.Log)
    {
        <tr>
            <td>@logEvent.Message</td>
            <td>@logEvent.Split</td>
            <td>@logEvent.Total</td>
        </tr>
    }
</table>
@* END Timing telemetry *@

@* Modal popup for previewing *@
<div class="modal fade" id="imgModal" tabindex="-1" role="dialog" aria-labelledby="mdlLabel">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title" id="mdlLabel"></h4>
            </div>
            <div class="modal-body">
                <img id="bigImage" class="img-responsive osd" />
                <div id="viewer" class="osd-viewer"></div>
                <div class="auth-ops" id="authOps">
                    <h5>Header</h5>
                    <div class="auth-desc">
                    </div>
                    <button id="authDo" type="button" class="btn btn-primary"></button>
                </div>
            </div>
            <div class="modal-footer">
                <button id="mdlPrev" type="button" class="btn btn-primary btn-prevnext" data-uri="">Prev</button>
                <button id="mdlNext" type="button" class="btn btn-primary btn-prevnext" data-uri="">Next</button>
            </div>
        </div>
    </div>
</div>
@* Modal popup for previewing *@



@{
    // Helper to render a batch progress bar
    void RenderBatchProgress(Batch batch)
    {
        var percentComplete = Model.GetBatchPercent(batch);
        var percentError = Model.GetBatchErrorPercent(batch);

        if (batch.Completed != batch.Count)
        {
            <div class="progress">
                <a href="@Model.GetPortalPageForBatch(batch)" title="Batch @PathStringUtils.GetSimpleNameFromPath(batch.Id): @StringUtils.GetLocalDate(batch.Submitted)" target="_blank">
                    <div class="progress-bar progress-bar-success" role="progressbar"
                         aria-valuenow="@batch.Completed" aria-valuemin="0" aria-valuemax="@batch.Count"
                         style="width: @percentComplete">
                        @percentComplete Complete
                    </div>
                    @if (batch.Errors > 0)
                    {
                        <div class="progress-bar progress-bar-danger" role="progressbar"
                             aria-valuenow="@batch.Errors" aria-valuemin="0" aria-valuemax="@batch.Count"
                             style="width: @percentError">
                            @percentError Error
                        </div>
                    }
                </a>
            </div>
        }
    }
    
    
    void RenderTree(IStructRange structRange, Dictionary<string, IPhysicalFile> fileMap)
    {
        
        <ul class="list-group">
            <li class="list-group-item active">
                <span class="glyphicon glyphicon-folder-open"></span>&nbsp;
                <strong>@structRange.Label</strong>
            </li>
            
            @foreach (var fileId in structRange.PhysicalFileIds)
            {
                var file = fileMap[fileId];
                var dlcsImage = Model.GetDlcsImage(file.StorageIdentifier);
                <li class="list-group-item list-group-item-@Model.GetCssClassForImageRow(dlcsImage, false)" id="@Model.GetTableId(file.StorageIdentifier)">
                    <span class="badge">@StringUtils.FormatFileSize(file.AssetMetadata.GetFileSize(), true)</span>
                    <span class="badge" style="@Model.GetAccessConditionStyle(file.AccessCondition)">@file.AccessCondition</span>
                    
                    @{
                        var problems = Model.GetProblemMessage(file.StorageIdentifier);
                    }
                    @if (problems.HasText())
                    {
                        <a class="sync-problem" href="#" data-placement="auto" title="@problems">
                            <span class="glyphicon glyphicon-exclamation-sign"></span>
                        </a>
                    }
                    
                    @if (dlcsImage != null)
                    {
                        <a href="@Url.Action("Index", "Asset", new { space = dlcsImage.Space, id = dlcsImage.ModelId })" 
                           target="_blank"  
                           title="@file.OriginalName"><strong>
                            @Html.Raw(Model.GetAssetGlyph(file.Family, file.MimeType))
                            @file.OriginalName.GetFileName()
                        </strong></a>
                                   
                        @if (dlcsImage.Error.HasText())
                        {
                            <br/>
                            <span class="text-danger">@dlcsImage.Error</span>
                        }
                    }
                    else
                    {
                        <strong>
                            @Html.Raw(Model.GetAssetGlyph(file.Family, file.MimeType))
                            @file.OriginalName.GetFileName()
                        </strong>
                        <span class="text-muted small"> - NOT ON DLCS</span>
                    }
                    
                    <br/>
                    <div class="small" style="margin-left: 18px;">
                        @file.MimeType 
                        @if (file.AssetMetadata.GetPronomKey().HasText())
                        {
                            <text>(@file.AssetMetadata.GetFormatName())</text>
                            var pronomKey = file.AssetMetadata.GetPronomKey();
                            var tnaPage = "https://www.nationalarchives.gov.uk/PRONOM/" + pronomKey;
                            
                            <a href="@tnaPage" target="_blank">@pronomKey</a>
                        }
                        else
                        {
                            <span class="text-danger">(@file.AssetMetadata.GetFormatName())</span>
                        }
                        |
                        @file.AssetMetadata.GetMediaDimensions().ToString()
                        <br/>
                        <a href="@Model.GetAwsConsoleUri(file.GetStoredFileInfo().Uri)" target="_blank">
                            <strong>S3:</strong> @file.StorageIdentifier
                        </a>  
                        <br/>
                        @foreach (var deliveredFile in Model.DeliveredFilesMap[file.StorageIdentifier])
                        {
                            <a href="@deliveredFile.PublicUrl" title="@deliveredFile.GetSummary()"><span class="label label-primary">@deliveredFile.DeliveryChannel</span></a>
                        }
                    </div>
                </li>
            }
            
            @if (structRange.Children.HasItems())
            {
                @foreach (var childRange in structRange.Children)
                {
                    <li class="list-group-item">
                        @{
                            RenderTree(childRange, fileMap);
                        }
                    </li>
                }
            }
        </ul>
    }
}